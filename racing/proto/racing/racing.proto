syntax = "proto3";
package racing;

option go_package = "/racing";

import "google/protobuf/timestamp.proto";

service Racing {
  // ListRaces will return a collection of all races.
  rpc ListRaces(ListRacesRequest) returns (ListRacesResponse) {}
  // GetRace will return one race matched by id.
  rpc GetRace(GetRaceRequest) returns (GetRaceResponse) {}
}

// only allow sorting for existing fileds
enum SortBy {
  UNSPECIFIED = 0;
  ID = 1;
  MEETING_ID = 2;
  NAME = 3;
  NUMBER = 4;
  VISIBLE = 5;
  ADVERTISED_START_TIME = 6;
}

// only allow status to be open or closed
enum Status {
  UNKNOW = 0;
  OPEN = 1;
  CLOSED = 2;
}

/* Requests/Responses */

// Request for ListRaces call.
message ListRacesRequest {
  ListRacesRequestFilter filter = 1;
  ListRacesRequestSorting sorting = 2;
}

// Response to ListRaces call.
message ListRacesResponse {
  repeated Race races = 1;
}

// Filter for listing races.
message ListRacesRequestFilter {
  repeated int64 meeting_ids = 1;
  // When Visible Only set to true, racing only returns races when visible is true, 
  // otherwise it returns all races that match other filter(s)
  bool visible_only = 2;
}

// Sorting for listing races.
message ListRacesRequestSorting {
  // SortBy represents the field the race list is sorted by
  SortBy sort_by = 1;
  // Descend represents whether the list should be sorted in descend order
  // default is false, aka the list would be sorted in aescend order
  bool descend = 2;
}

// Request for GetRace call.
message GetRaceRequest {
  int64 id = 1;
}

// Response to GetRace call.
message GetRaceResponse {
  Race race = 1;
}

/* Resources */

// A race resource.
message Race {
  // ID represents a unique identifier for the race.
  int64 id = 1;
  // MeetingID represents a unique identifier for the races meeting.
  int64 meeting_id = 2;
  // Name is the official name given to the race.
  string name = 3;
  // Number represents the number of the race.
  int64 number = 4;
  // Visible represents whether or not the race is visible.
  bool visible = 5;
  // AdvertisedStartTime is the time the race is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 6;
  // Satus represents whether the race is open or closed
  Status status = 7;
}

